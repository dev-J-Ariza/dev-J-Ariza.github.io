<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on J-Ariza的点滴</title><link>http://dev-J-Ariza.github.io/categories/python/</link><description>Recent content in Python on J-Ariza的点滴</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 04 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://dev-J-Ariza.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Bing壁纸预览及下载</title><link>http://dev-J-Ariza.github.io/p/bing%E5%A3%81%E7%BA%B8%E9%A2%84%E8%A7%88%E5%8F%8A%E4%B8%8B%E8%BD%BD/</link><pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate><guid>http://dev-J-Ariza.github.io/p/bing%E5%A3%81%E7%BA%B8%E9%A2%84%E8%A7%88%E5%8F%8A%E4%B8%8B%E8%BD%BD/</guid><description>简介 这是一个桌面端的程序，可以浏览Bing中文区官网上最近7天的壁纸，并且提供了下载高清版壁纸的功能。
项目地址： https://github.com/dev-J-Ariza/BingWallpaperPreview
实现 技术栈 使用Tkinter开发gui，使用requests进行网络请求。
工程结构 main.py - 程序的入口，运行主函数即可。 endpoint.py - 网络请求的工具类，主要负责请求Bing壁纸，并对返回结果进行解析。 gui.py - 提供下载、前后查找功能，用户可以一张张翻看最近7天的壁纸，并且下载。 源码分析 首先我们先看负责网络请求的endpoint.py，
去哪获取Bing壁纸 https://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx={cur}&amp;n=1&amp;mkt=zh-CN 这个就是官方提供的接口，用来获取要查找的壁纸的url。 也就是说，请求这个接口，得到的结果是一个指向壁纸的url。 其中cur=0表示请求今天的， cur=1表示请求前一天的，以此类推。
如何解析出图片 当获取到壁纸url后，可以通过requests发出请求得到图片的数据，然后写到io管道里面。
def get_single_image_stream(img_url): image_bytes = requests.get(img_url).content data_stream = io.BytesIO(image_bytes) return data_stream 接着我们再看用户图形界面部分 3. gui组成
我们使用Tkinter来编写gui部分， Window表示某个应用程序的窗口，是Tkinter里面用来承载一切组件的基础，所以最底层是Window。 在这之上我们就直接展示壁纸，使用Canvas组件负责展示，所以第二层是Canvas。 接着，需要为用户提供操作按钮，方便用户查看前一张/后一张/下载图片，所以需要用一个Frame来盛放各个按钮，这个frame在canvas之上。 最后，就是各个具体按钮。
Window -&amp;gt; Canvas -&amp;gt; Frame -&amp;gt; Button
如何展示出壁纸 Canvas是画布的意思，可以用来在屏幕上的某个区域展示图形，这个图形可以是纯色背景，也可以是各种格式的文件。 这点很想Android中的Canvas， Android.Canvas提供了各种drawXX()方法，用户还可以自己去画出各种形状。
canvas.create_image(450, 300, image=get_image(image_url)) get_image返回的是一个图片控件，放在Canvas里，内容是image_url指向的壁纸。
下载 下载的本质就是写文件的IO操作，需要指定保存路径，并且需要数据内容。 保存路径通常是用户自己决定的，所以提供一个对话框，用户可以指定保存 路径。这个Tkinter有现成的方法，filedialog.</description></item><item><title>python实现北京公交实时查询</title><link>http://dev-J-Ariza.github.io/p/python%E5%AE%9E%E7%8E%B0%E5%8C%97%E4%BA%AC%E5%85%AC%E4%BA%A4%E5%AE%9E%E6%97%B6%E6%9F%A5%E8%AF%A2/</link><pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate><guid>http://dev-J-Ariza.github.io/p/python%E5%AE%9E%E7%8E%B0%E5%8C%97%E4%BA%AC%E5%85%AC%E4%BA%A4%E5%AE%9E%E6%97%B6%E6%9F%A5%E8%AF%A2/</guid><description>起源 我最近在学习python，学的过程中打算完成个小的项目。于是在网络搜索关键词“python入门项目”，在所有的结果中出现了【查询实时公交路线】这个api，个人 感觉既简单又有些意思。 （谁知这个api最后早就过期了。。这也是开发过程中一个稍显麻烦的地方。）
本文通过一下3个部分介绍实现过程，
搜索（捡现成的） 工程结构以及具体实现 上传到pypi 搜索 作为python菜鸟，还是像观摩一下前辈们的用法以及产出效果。 开发过程中我主要参考的是 Python实现命令行监控北京实时公交之一。 此文涉及到网络请求，结果缓存（这个我没想到，而且作者实现的方式也很简洁），结果输出（对命令行的排版），可以看到内容还是很丰富的。
前面说到之前网上搜索的api不能用了，于是就开始了各种尝试，先去了各大免费api平台看有无现成的，结果自然是没有。要么就是一个小网站还要注册，还不保险。 最后是在github上面检索到的，输入关键字 ‘beijing bus’， 并且按照 时间倒叙查找， 终于找到了某位大佬的小作业，里面还有请求实时公交的过程， 我试了一下，疗效不错。 链接在此， Zoutianjian/Beijing_Bus_realtime_query
工程结构以及具体实现 项目结构 为了开发的规范性，写代码之前要设计好项目结构。对python项目来说，这个也是有规范可以依据的。 python 软件目录结构规范. 简单来说，最外层目录是项目根目录用项目命名，在它下面建立一个同名文件夹，真正的开发代码放在这里面。
同级建立tests目录，存放单元测试代码。
同级建立 requirements.txt 里面写入所有你用到的第三方包，这样当别人clone你的项目运行时，只需要 pip install -r requirements.txt 就可以 安装所有需要的包了。
如果打算上传到pypi，则需要setup.py
如果用到流水线，则在项目根目录根据各种CI的要求放置配置文件，我这里用的是 .travis.yml. (这个后面也许会单独写个文章简述流水线配置，真的太烦了， 我项目一半以上的提交用来配置流水线了。。)
Foo(根目录，git目录)/ | |-- foo(项目源码)/ | | | |-- __init__.py | |-- main.py |-- tests(单元测试代码)/ | | | |-- __init__.py | |-- test**.py | |-- docs/ | |-- conf.</description></item></channel></rss>